package com.example.books.repository;

import com.example.books.Book;
// import com.example.books.repository.InMemoryBookRepository;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.*;

@DisplayName("InMemoryBookRepository 테스트")
class InMemoryBookRepositoryTest {
    
    private InMemoryBookRepository repository;
    
    @BeforeEach
    void setUp() {
        repository = new InMemoryBookRepository();
    }
    
    @Test
    @DisplayName("도서를 저장하고 조회할 수 있다")
    void saveAndFindBook() {
        // given
        Book book = new Book("978-1234567890", "클린 코드", "로버트 마틴");
        
        // when
        repository.save(book);
        Optional<Book> found = repository.findByIsbn("978-1234567890");
        
        // then
        assertThat(found).isPresent();
        assertThat(found.get()).isEqualTo(book);
    }
    
    @Test
    @DisplayName("존재하지 않는 ISBN으로 조회 시 빈 결과를 반환한다")
    void findNonExistentBook() {
        // when
        Optional<Book> found = repository.findByIsbn("978-0000000000");
        
        // then
        assertThat(found).isEmpty();
    }
    
    @Test
    @DisplayName("제목으로 도서를 검색할 수 있다")
    void findBooksByTitle() {
        // given
        repository.save(new Book("978-1234567890", "클린 코드", "로버트 마틴"));
        repository.save(new Book("978-0987654321", "클린 아키텍처", "로버트 마틴"));
        repository.save(new Book("978-1111111111", "이펙티브 자바", "조슈아 블로크"));
        
        // when
        List<Book> result = repository.findByTitle("클린");
        
        // then
        assertThat(result).hasSize(2);
        assertThat(result).extracting("title")
            .containsExactlyInAnyOrder("클린 코드", "클린 아키텍처");
    }
    
    @Test
    @DisplayName("저자명으로 도서를 검색할 수 있다")
    void findBooksByAuthor() {
        // given
        repository.save(new Book("978-1234567890", "클린 코드", "로버트 마틴"));
        repository.save(new Book("978-0987654321", "클린 아키텍처", "로버트 마틴"));
        repository.save(new Book("978-1111111111", "이펙티브 자바", "조슈아 블로크"));
        
        // when
        List<Book> result = repository.findByAuthor("로버트");
        
        // then
        assertThat(result).hasSize(2);
        assertThat(result).extracting("author")
            .containsOnly("로버트 마틴");
    }
    
    @Test
    @DisplayName("모든 도서를 조회할 수 있다")
    void findAllBooks() {
        // given
        repository.save(new Book("978-1234567890", "클린 코드", "로버트 마틴"));
        repository.save(new Book("978-0987654321", "클린 아키텍처", "로버트 마틴"));
        
        // when
        List<Book> result = repository.findAll();
        
        // then
        assertThat(result).hasSize(2);
    }
    
    @Test
    @DisplayName("ISBN 존재 여부를 확인할 수 있다")
    void existsByIsbn() {
        // given
        Book book = new Book("978-1234567890", "클린 코드", "로버트 마틴");
        repository.save(book);
        
        // when & then
        assertThat(repository.existsByIsbn("978-1234567890")).isTrue();
        assertThat(repository.existsByIsbn("978-0000000000")).isFalse();
    }
    
    @Test
    @DisplayName("도서를 삭제할 수 있다")
    void deleteBook() {
        // given
        Book book = new Book("978-1234567890", "클린 코드", "로버트 마틴");
        repository.save(book);
        
        // when
        repository.deleteByIsbn("978-1234567890");
        
        // then
        assertThat(repository.existsByIsbn("978-1234567890")).isFalse();
        assertThat(repository.findByIsbn("978-1234567890")).isEmpty();
    }
}